= C# 2.0中的Yield语句在Delphi中的实现 =

== Yield与代码协同 (Coroutine)  ==

C# 2.0 是在不修改 CLR 的前提下由编译器通过有限状态机来实现 iterator block 中 yield 关键字的。
从而实现将控制和行为分离。
实际上，这一机制的最终目的是提供一个代码协同(Coroutine)执行的支持机制。参见如下的代码，更能
说明问题：
<code>
using System.Collections.Generic;

public class Tokens : IEnumerable<string>
{
  //iterator block，实现控制枚举的元素
  public IEnumerator<string> GetEnumerator()
  {
    for(int i = 0; i<elements.Length; i++)
      yield elements[i];
  }
  ...
}

foreach (string item in new Tokens())
{
  //实现终端上打印元素的行为
  Console.WriteLine(item);
}
</code>

在这段代码执行过程中，foreach 的循环体和 GetEnumerator 函数体实际上是在同一个线程中交替执行的。这是一种介于线程和顺序执行之间的协同执行模式，之所以称之为协同（Coroutine），是因为同时执行的多个代码块之间的调度是由逻辑隐式协同完成的。

就协同执行而言，从功能上可以分为行为、控制两部分，控制又可进一步细分为控制逻辑和控制状态。行为对应着如何处理目标对象，如上述代码中：行为就是将目标对象打印到终端；控制则是如何遍历这个 elements 数组，可进一步细分为控制逻辑（顺序遍历）和控制状态（当前遍历到哪个元素）。

其中心思想就是将行为与控制分离，以此来降低代码的耦合度，增强通用性，提高代码的复用率。 

== Delphi中Yield的使用 ==

让我们先看下面一段代码，producer过程（生产者）产生一些数值，而Consumer过程（消费者）则处理值：
<code>
procedure producer();
var
  i: integer;
begin
  for i := 0 to 100 do
    if i mod 5 = 0 then consumer(i);
end;

procedure Consumer(const value: integer);
begin
  writeln(value);
end;
</code>

代码似乎很完美，但是在生产者（producer）调用消费过程（consumer）这里出现了耦合，我们希望生产者过程（producer）能增强通用性，降低耦合度，能为不同的消费者服务。
要达到上述要求，必须要在一个地方维护控制的状态：记住枚举时候的状态。在消费者企图调用生产者产生的值时，生产者不得不在这个地方记住在调用之间的状态。
在Delphi中我们使用 YieldObj 作为维护控制的状态的地方。请看代码：
<code>
procedure Producer(YieldObj: TMeYieldObject);
var
  i: integer;
begin
  for i := 0 to 100 do
    if i mod 5 = 0 then YieldObj.Yield(i);
end;

procedure Consumer();
  function GetEnumerator: TYieldInteger;
  begin
    Result:= TYieldInteger.Create(Producer);
  end;

begin
  with GetEnumerator do
  try
    While MoveNext do
      writeln(Current);
  finally
    Free;
  end;
end;
</code>

执行Yield方法将退出Producer并返回"i"值作为Yield的参数，不同的是，当Yield返回时候，将会接着上次Yield退出的地方接着执行。
Yield 的作用就是保持当前状态（局部变量的值），然后返回行为逻辑控制，当下一次执行能接着状态执行。

消费者函数仅仅是通过MoveNext简单的调用生产者函数抓住每一个Yield的值。只要你想的话，你也可以对所有Producer产生的值进行
求和：
<code>
procedure Consumer();
var
  Sum: integer;
begin
  sum := 0;
  with TYieldInteger.Create(Producer) do
  try
    While MoveNext do
    begin
      Inc(Sum, Current);
    end;
  finally
    Free;
  end;
  writeln(Sum);
end;
</code>

在Delphi2005(D9)以上版本上可以用For..In循环，这样来写（不过为了兼容性，还是使用上述的代码放心）：
<code>
type
  TMyContainer = class
  public
    function GetEnumerator: TYieldInteger;
  end;
  
  function TMyContainer.GetEnumerator: TYieldInteger;
  begin
    Result:= TYieldInteger.Create(Producer);
  end;

procedure Consumer();
var
  i:  integer;
  Sum: integer;
  vMyContainer: TMyContainer;
begin
  sum := 0;
  vMyContainer := TMyContainer.Create;
  try
    for i in vMyContainer do Inc(Sum, i);
  finally
    vMyContainer.Free;
  end;
  writeln(Sum);
end;
</code>



== 在Delphi上实现 Yield ==
本实现是由俄罗斯的牛人 [http://santonov.blogspot.com/ Sergey Antonov] (or Антонов Сергей - aka. 0xffff) 具体实施的。
该方法是通过保护当前堆栈现场Frame以及寄存器的方式实现，注意在控制逻辑中不能递归。如果要以状态机的方式实现，就只能考虑预编译处理了！
本人只是将其稍作修改并移植到了MeObject上。你可以在 http://code.google.com/p/meaop/source 中的MeObjects/src/uMeYield.pas中找到。
不过如果你想使用delphi class类型，你需要打开MeSetting.inc中的 YieldClass_Supports 编译开关。

=== 关键执行流程分析 ===
MoveNext 执行流程
当第一次执行MoveNext的时候，FNextItemEntryPoint 指向YieldProc的入口
保存寄存器到堆栈
设置 FIsField 0
压入 @@exit 地址
保存ESP 到 字段BESP
没有 localStackFrame 跳到 JumpIn
ebx...ebp全部清零（因为还没有数据）
压入 FNextItemEntryPoint 入口地址
使用 Ret 执行 FNextItemEntryPoint

当第一次执行MoveNext的时候，FNextItemEntryPoint 指向YieldProc的入口，因此这里执行 StringYieldProc:
在StringYieldProc中，当执行到 Yield()的时候
保存 ebx...ebp到相应字段
弹出调用者的地址，并保存到 FNextItemEntryPoint
执行 SaveYieldedValue
Calculate the current local stack frame size
Preserve the local stack frame
设置 FIsYield 1

== 在MeObject上的使用 ==
首先确保关闭MeSetting.inc中的 YieldClass_Supports 编译开关。在写法上略有差别：
<code>
procedure StringYieldProc(YieldObj: PMeYieldObject);
var  
  YieldValue: string;
  i: integer;
begin
  YieldValue:='None';
  YieldObj.Yield(YieldValue);
  for i := 1 to 10 do
  begin
    YieldValue := YieldValue + IntToStr(i);
    YieldObj.Yield(YieldValue);
  end;
end;

function GetEnumerator: PYieldString;
begin
  Result:= New(PYieldString, Create(StringYieldProc));
end;

//Usage
    with GetEnumerator^ do
    try
      while MoveNext do
      begin
        Writeln(Current);
      end;
    finally
      Free;
    end;
</code>

== 使用 YieldClass_Supports 编译开关的写法 ==
<code>
{$I MeSetting.inc}

//控制逻辑：枚举器
procedure StringYieldProc(YieldObj: {$IFDEF YieldClass_Supports}TMeYieldObject{$ELSE} PMeYieldObject{$endif});
var  
  YieldValue: string;
  i: integer;
begin
  YieldValue:='None';
  YieldObj.Yield(YieldValue);//返回行为逻辑
  for i := 1 to 10 do
  begin
    YieldValue := YieldValue + IntToStr(i);
    YieldObj.Yield(YieldValue); //返回行为逻辑
  end;
end;

function GetEnumerator: {$IFDEF YieldClass_Supports}TYieldString {$ELSE}PYieldString{$ENDIF};
begin
  Result:= {$IFDEF YieldClass_Supports} TYieldString.Create(StringYieldProc){$ELSE}New(PYieldString, Create(StringYieldProc)){$ENDIF};
end;

{$IFDEF SUPPORTS_FOR_IN}
{$IFDEF YieldClass_Supports}
type
  TMyStrings = class
  public
    function GetEnumerator: TYieldString;
  end;

function TMyStrings.GetEnumerator: TYieldString;
begin
  Result:= TYieldString.Create(StringYieldProc);
end;

var
  s: string;
  vStrs: TMyStrings;
{$ENDIF}
{$ENDIF}
begin
    {$IFDEF SUPPORTS_FOR_IN}
      {$IFDEF YieldClass_Supports}
      writeln('Test For_In Yield tEnumerator:');
      vStrs := TMyStrings.Create;
      try
      for s in vStrs do
        Writeln(s);
      finally
       vStrs.Free;
      end;
     {$ENDIF}
   {$ENDIF}
    writeln(#13#10'Test Yield tEnumerator:');
    with GetEnumerator{$IFNDEF YieldClass_Supports}^{$endif} do
    try
      while MoveNext do
      begin
        Writeln(Current);
      end;
    finally
      Free;
    end;
{$IFDEF SUPPORTS_FOR_IN}
{$IFDEF YieldClass_Supports}
    s := '';
{$ENDIF}
{$ENDIF}
end.

</code>

== 错误使用 ==

以下为一些错误使用Delphi Yield的方式：

=== 交替控制 ===

企图在两个YieldProc中交替控制Yield，实际上这将在堆栈上形成递归，这有可能会造成堆栈溢出或死锁。

<code>
var
  i: integer;
  w,b: integer;
procedure BlackYieldProc(const YieldObj: {$IFDEF YieldClass_Supports}TMeYieldObject{$ELSE} PMeYieldObject{$endif});forward;

procedure WhiteYieldProc(const YieldObj: {$IFDEF YieldClass_Supports}TMeYieldObject{$ELSE} PMeYieldObject{$endif});
begin
  while true do
  begin
    writeln('white move: ', w);
    inc(w);
    YieldObj.Yield(w);
    BlackYieldProc(YieldObj);  
    //if w > 10001 then exit;
  end;
end;

procedure BlackYieldProc(const YieldObj: {$IFDEF YieldClass_Supports}TMeYieldObject{$ELSE} PMeYieldObject{$endif});
begin
    //if b > 10 then exit;
    writeln('black move: ', b);
    inc(b);
    YieldObj.Yield(b);
    WhiteYieldProc(YieldObj); //<--禁止在过程之间中交替执行.!否则可能会堆栈溢出。
end;

  w := 0; b:= 0; i := 0;
  with GetWhiteEnumerator{$IFNDEF YieldClass_Supports}^{$endif} do
    try
      while MoveNext do
      begin
        inc(i);
        //if i > 10 then break;
        //Writeln(Current);
      end;
    finally
      Free;
    end;
</code>

=== Pipeline 模式的滥用 ===

首先提醒递归的存在，注意堆栈溢出，另外这种写法绝对能把你眼球搞晕，不建议使用。请看代码：
<code>
//pipeline pattern
type
  PYieldIntegerRange = ^ TYieldIntegerRange;
  TYieldIntegerRange = class(TYieldInteger)
  public
    Min, Max: Integer;
    constructor Create(const aMin, aMax: Integer);
  end;

  PYieldIntegerMul = ^ TYieldIntegerMul;
  TYieldIntegerMul = class(TYieldInteger)
  public
    Factor: Integer;
    Input: TYieldInteger;
    constructor Create(const aFact: Integer; const aInput: TYieldInteger);
  end;

  PYieldIntegerMod = ^ TYieldIntegerMod;
  TYieldIntegerMod = class(TYieldInteger)
  public
    Factor: Integer;
    Input: TYieldInteger;
    constructor Create(const aFact: Integer; const aInput: TYieldInteger);
  end;

  PYieldIntegerJoin = ^ TYieldIntegerJoin;
  TYieldIntegerJoin = class(TYieldInteger)
  public
    Input1, Input2: TYieldInteger;
    constructor Create(const aInput1, aInput2: TYieldInteger);
  end;

procedure RangeYieldProc(const YieldObj: TMeYieldObject);
var
  i: integer;
begin
  with TYieldIntegerRange(YieldObj) do
  begin
    for i := Min to Max do Yield(i);
  end;
end;

procedure MulYieldProc(const YieldObj: TMeYieldObject);
var
  i: integer;
begin
  with TYieldIntegerMul(YieldObj) do
  begin
    if Assigned(Input) then
    while Input.MoveNext do
    begin
      i := Input.Current*Factor;
      YieldObj.Yield(i);
    end;
  end;
end;

procedure ModYieldProc(const YieldObj: TMeYieldObject);
var
  i: integer;
begin
  with TYieldIntegerMod(YieldObj) do
  begin
    if Assigned(Input) then
    while Input.MoveNext do
    begin
      i := Input.Current;
      if i mod Factor = 0 then
      begin
        YieldObj.Yield(i);
      end;
    end;
  end;
end;

procedure JoinYieldProc(const YieldObj: TMeYieldObject);
var
  i: integer;
begin
  with TYieldIntegerJoin(YieldObj) do
  begin
    if Assigned(Input1) then while Input1.MoveNext do
    begin
      i := Input1.Current;
      YieldObj.Yield(i);
    end;

    if Assigned(Input2) then while Input2.MoveNext do
    begin
      i := Input2.Current;
      YieldObj.Yield(i);
    end;
  end;
end;

constructor TYieldIntegerRange.Create(const aMin, aMax: Integer);
begin
  Min := aMin; Max := aMax;
  inherited Create(RangeYieldProc);
end;

constructor TYieldIntegerMul.Create(const aFact: Integer; const aInput: TYieldInteger);
begin
  Factor:= aFact; Input := aInput;
  inherited Create(MulYieldProc);
end;

constructor TYieldIntegerMod.Create(const aFact: Integer; const aInput: TYieldInteger);
begin
  Factor:= aFact; Input := aInput;
  inherited Create(ModYieldProc);
end;

constructor TYieldIntegerJoin.Create(const aInput1, aInput2: TYieldInteger);
begin
  Input1:= aInput1; Input2 := aInput2;
  inherited Create(JoinYieldProc);
end;

var
  RangeI,Range1I, MulI, JoinI, ModI: TYieldInteger;

RangeI := TYieldIntegerRange.Create(-4,-2);
Range1I := TYieldIntegerRange.Create(1,10);
MulI := TYieldIntegerMul.Create(2, Range1I);
ModI := TYieldIntegerMod.Create(3, MulI);
JoinI := TYieldIntegerJoin.Create(RangeI, ModI);

while JoinI.MoveNext do
  Writeln(JoinI.Current);

MulI.free;
RangeI.free;
JoinI.free;
ModI.free;
Range1I.free;
</code>

程序输出：
<code>
 -4
-3
-2
6
12
18
</code>

输出值中-4,-3 和 -2 很好理解。后面的值 6,12, 18是怎么输出的？请看下表：
<code>
IntegerRange  : 1 2 3 4 5  6  7  8  9  10
IntegerMul(2) : 2 4 6 8 10 12 14 16 18 20
IntegerMod(3) :     6      12       18
</code>

